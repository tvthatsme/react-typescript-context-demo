{"version":3,"sources":["contexts/CurrentPage.tsx","contexts/AudienceList.tsx","utilities/uuid.ts","contexts/AppContext.tsx","components/PageIndex.tsx","components/AudienceList.tsx","components/AudienceForm.tsx","pages/ViewAndUpdate.tsx","pages/Create.tsx","App.tsx","index.tsx"],"names":["Page","ActionTypes","CurrentPageContext","React","undefined","CurrentPageSetterContext","CurrentPageProvider","_ref","children","_ref$initialPage","initialPage","VIEW_AND_UPDATE","_React$useState","_React$useState2","Object","slicedToArray","currentPage","setCurrentPage","react","Provider","value","s4","Math","floor","random","toString","substring","uuid","AudienceListContext","AudienceListDispatchContext","audienceReducer","state","action","type","ADD_MEMBER","member","objectSpread","id","audience","concat","toConsumableArray","EDIT_MEMBER","otherMembers","filter","DELETE_MEMBER","AudienceListProvider","_React$useReducer","_React$useReducer2","updateAudience","AppContext","CurrentPage_CurrentPageProvider","AudienceList_AudienceListProvider","PageIndex","pageName","context","Error","useCurrentPage","setPage","useSetCurrentPage","otherPages","values","page","className","map","key","href","onClick","event","e","preventDefault","handleLinkClick","sortByFirstName","a","b","aName","firstName","toLowerCase","bName","AudienceList","handleSelection","sortedByFirstName","sort","length","lastName","email","AudienceForm","handleDelete","isEdit","initialMemberValue","setFirstName","_React$useState3","_React$useState4","setLastName","_React$useState5","_React$useState6","setEmail","_React$useState7","_React$useState8","showConfirm","setShowConfirm","dispatch","useAudienceListReducer","confirmationMessage","onSubmit","memberFromForm","htmlFor","required","onChange","currentTarget","ViewAndUpdate","useAudienceList","selectedMember","setSelectedMember","selectedInAudience","find","components_PageIndex","components_AudienceList","components_AudienceForm","CREATE","Create","App","react_default","createElement","contexts_AppContext","pages_ViewAndUpdate","pages_Create","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.4955167e.chunk.js","sourcesContent":["import * as React from 'react';\n\n// Provide a enum of possible pages for the application\nenum Page {\n  CREATE = 'create',\n  VIEW_AND_UPDATE = 'view-and-update'\n}\n\ntype CurrentPage = Page;\ntype Setter = (page: CurrentPage) => void;\ntype CurrentPageProviderProps = {\n  children: React.ReactNode;\n  initialPage?: Page;\n};\n\nconst CurrentPageContext = React.createContext<CurrentPage | undefined>(\n  undefined\n);\nconst CurrentPageSetterContext = React.createContext<Setter | undefined>(\n  undefined\n);\n\nconst CurrentPageProvider = ({\n  children,\n  initialPage = Page.VIEW_AND_UPDATE\n}: CurrentPageProviderProps) => {\n  const [currentPage, setCurrentPage] = React.useState(initialPage);\n\n  return (\n    <CurrentPageContext.Provider value={currentPage}>\n      <CurrentPageSetterContext.Provider value={setCurrentPage}>\n        {children}\n      </CurrentPageSetterContext.Provider>\n    </CurrentPageContext.Provider>\n  );\n};\n\n// Provide a method for consuming the current page context\nconst useCurrentPage = () => {\n  const context = React.useContext(CurrentPageContext);\n  if (context === undefined) {\n    throw new Error('useCurrentPage must be used within a CurrentPageProvider');\n  }\n  return context;\n};\n\n// Provide a method for consuming the setter for the current page context\nconst useSetCurrentPage = () => {\n  const context = React.useContext(CurrentPageSetterContext);\n  if (context === undefined) {\n    throw new Error('useCurrentPage must be used within a CurrentPageProvider');\n  }\n  return context;\n};\n\nexport { Page, CurrentPageProvider, useCurrentPage, useSetCurrentPage };\n","import * as React from 'react';\n\nimport uuid from '../utilities/uuid';\n\n// Define the action types that can be done on the audience list\nexport enum ActionTypes {\n  ADD_MEMBER = 'ADD_MEMBER',\n  EDIT_MEMBER = 'EDIT_MEMBER',\n  DELETE_MEMBER = 'DELETE_MEMBER'\n}\n\n// Define the schema for an audience member\nexport type AudienceMember = {\n  id?: string;\n  firstName: string;\n  lastName: string;\n  email: string;\n};\n\n// Define the state parts that the audience list context will track\ntype State = {\n  audience: AudienceMember[];\n};\n\n// Define the actions that can be done on the audience list\nexport type Action =\n  | {\n      type: ActionTypes.ADD_MEMBER;\n      member: AudienceMember;\n    }\n  | {\n      type: ActionTypes.EDIT_MEMBER;\n      member: AudienceMember;\n    }\n  | {\n      type: ActionTypes.DELETE_MEMBER;\n      member: AudienceMember;\n    };\n\n// Define the dispatch function for the context reducer\ntype Dispatch = (action: Action) => void;\n\ntype AudienceListProviderProps = {\n  children: React.ReactNode;\n};\n\nconst AudienceListContext = React.createContext<State | undefined>(undefined);\nconst AudienceListDispatchContext = React.createContext<Dispatch | undefined>(\n  undefined\n);\n\nconst audienceReducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case ActionTypes.ADD_MEMBER: {\n      const member: AudienceMember = {\n        ...action.member,\n        id: uuid()\n      };\n      return {\n        ...state,\n        audience: [...state.audience, member]\n      };\n    }\n    case ActionTypes.EDIT_MEMBER: {\n      const otherMembers = state.audience.filter(\n        (member: AudienceMember) => member.id !== action.member.id\n      );\n      return {\n        ...state,\n        audience: [...otherMembers, action.member]\n      };\n    }\n    case ActionTypes.DELETE_MEMBER: {\n      const otherMembers = state.audience.filter(\n        (member: AudienceMember) => member.id !== action.member.id\n      );\n      return {\n        ...state,\n        audience: [...otherMembers]\n      };\n    }\n    default:\n      return state;\n  }\n};\n\nconst AudienceListProvider = ({ children }: AudienceListProviderProps) => {\n  // Define the initial state\n  const initialState: State = {\n    audience: []\n  };\n\n  // Use a reducer as an interface for updating the audience list\n  const [audience, updateAudience] = React.useReducer(\n    audienceReducer,\n    initialState\n  );\n\n  return (\n    <AudienceListContext.Provider value={audience}>\n      <AudienceListDispatchContext.Provider value={updateAudience}>\n        {children}\n      </AudienceListDispatchContext.Provider>\n    </AudienceListContext.Provider>\n  );\n};\n\n// Provide a method for consuming the audience list context\nconst useAudienceList = () => {\n  const context = React.useContext(AudienceListContext);\n  if (context === undefined) {\n    throw new Error(\n      'useAudienceList must be used within a AudienceListProvider'\n    );\n  }\n  return context.audience;\n};\n\n// Provide a method for consuming the audience list reducer context\nconst useAudienceListReducer = () => {\n  const context = React.useContext(AudienceListDispatchContext);\n  if (context === undefined) {\n    throw new Error(\n      'useAudienceListReducer must be used within a AudienceListProvider'\n    );\n  }\n  return context;\n};\n\nexport { AudienceListProvider, useAudienceList, useAudienceListReducer };\n","const s4 = (): string => {\n  return Math.floor((1 + Math.random()) * 0x10000)\n    .toString(16)\n    .substring(1);\n};\n\nconst uuid = (): string => {\n  return (\n    s4() +\n    s4() +\n    '-' +\n    s4() +\n    '-' +\n    s4() +\n    '-' +\n    s4() +\n    '-' +\n    s4() +\n    s4() +\n    s4()\n  );\n};\n\nexport default uuid;\n","import * as React from 'react';\n\nimport { CurrentPageProvider } from './CurrentPage';\nimport { AudienceListProvider } from './AudienceList';\n\ntype AppContextProps = { children: React.ReactNode | React.ReactNode[] };\n\n// Compose all the contexts needed for the application state\nconst AppContext = ({ children }: AppContextProps) => (\n  <CurrentPageProvider>\n    <AudienceListProvider>{children}</AudienceListProvider>\n  </CurrentPageProvider>\n);\n\nexport default AppContext;\n","import * as React from 'react';\n\nimport {\n  Page,\n  useCurrentPage,\n  useSetCurrentPage\n} from '../contexts/CurrentPage';\n\ntype PageProps = {\n  children: React.ReactNode;\n  pageName: Page;\n};\n\nconst PageIndex = ({ children, pageName }: PageProps) => {\n  const currentPage = useCurrentPage();\n  const setPage = useSetCurrentPage();\n\n  // Create an array of the other pages of the app for a navigation\n  const otherPages: Page[] = Object.values(Page).filter(\n    page => page !== pageName\n  );\n\n  // Handle navigation to another page\n  const handleLinkClick = (e: React.MouseEvent, page: Page) => {\n    e.preventDefault();\n    setPage(page);\n  };\n\n  // Show the page if the current page matches, otherwise hide this page\n  return currentPage === pageName ? (\n    <div className=\"page\">\n      <div className=\"navigation\">\n        {otherPages.map(page => (\n          <a\n            key={page}\n            href={page}\n            onClick={(event: React.MouseEvent) => {\n              handleLinkClick(event, page);\n            }}\n            className=\"navigation-link\"\n          >\n            {page}\n          </a>\n        ))}\n      </div>\n      {children}\n    </div>\n  ) : null;\n};\n\nexport default PageIndex;\n","import * as React from 'react';\n\nimport { AudienceMember } from '../contexts/AudienceList';\n\ninterface AudienceListProps {\n  audience: AudienceMember[];\n  handleSelection: (member: AudienceMember) => void;\n}\n\n// Define a function to sort a list by first name\nconst sortByFirstName = (a: AudienceMember, b: AudienceMember): number => {\n  const aName = a.firstName.toLowerCase();\n  const bName = b.firstName.toLowerCase();\n  if (aName < bName) {\n    return -1;\n  }\n  if (aName > bName) {\n    return 1;\n  }\n  return 0;\n};\n\nconst AudienceList = ({ audience, handleSelection }: AudienceListProps) => {\n  const sortedByFirstName: AudienceMember[] = audience.sort(sortByFirstName);\n\n  if (sortedByFirstName.length > 0) {\n    return (\n      <div className=\"audience-list\">\n        <ul className=\"list\">\n          {sortedByFirstName.map(member => {\n            return (\n              <li key={member.id} className=\"audience-member\">\n                <div onClick={() => handleSelection(member)}>\n                  <p className=\"audience-name\">{member.firstName}</p>\n                  <p className=\"audience-name\">{member.lastName}</p>\n                  <p className=\"audience-email\">{member.email}</p>\n                </div>\n              </li>\n            );\n          })}\n        </ul>\n      </div>\n    );\n  } else {\n    return (\n      <div className=\"audience-list\">\n        <p>There is nobody in your audience yet.</p>\n      </div>\n    );\n  }\n};\n\nexport default AudienceList;\n","import * as React from 'react';\n\nimport {\n  ActionTypes,\n  AudienceMember,\n  useAudienceListReducer\n} from '../contexts/AudienceList';\n\ninterface AudienceFormProps {\n  member?: AudienceMember;\n  handleDelete?: () => void;\n}\n\nconst AudienceForm = ({ member, handleDelete }: AudienceFormProps) => {\n  const isEdit = member !== undefined;\n\n  // If the caller has a member value to edit, use that. Otherwise, use empty\n  // values for every part of the form.\n  const initialMemberValue: AudienceMember = member\n    ? member\n    : {\n        firstName: '',\n        lastName: '',\n        email: ''\n      };\n\n  // Setup form state hooks\n  const [firstName, setFirstName] = React.useState<string>(\n    initialMemberValue.firstName\n  );\n  const [lastName, setLastName] = React.useState<string>(\n    initialMemberValue.lastName\n  );\n  const [email, setEmail] = React.useState<string>(initialMemberValue.email);\n  const [showConfirm, setShowConfirm] = React.useState<boolean>(false);\n  const dispatch = useAudienceListReducer();\n\n  // Because we are using controlled inputs in this component (for the ability\n  // to clear and update), we need to update things if the initial member value\n  // changes at all.\n  React.useEffect(() => {\n    setFirstName(initialMemberValue.firstName);\n    setLastName(initialMemberValue.lastName);\n    setEmail(initialMemberValue.email);\n  }, [\n    initialMemberValue.firstName,\n    initialMemberValue.lastName,\n    initialMemberValue.email\n  ]);\n\n  // Have a confirmation message to show after any successful aciton\n  const confirmationMessage = isEdit\n    ? 'User successfully updated!'\n    : 'New user successfully added!';\n\n  // Add or edit the selected member\n  const handleFormSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n\n    // Assemble AudienceMember object form form state\n    const memberFromForm: AudienceMember = {\n      firstName,\n      lastName,\n      email\n    };\n\n    // Add or update\n    if (member === undefined) {\n      dispatch({ type: ActionTypes.ADD_MEMBER, member: memberFromForm });\n      setFirstName('');\n      setLastName('');\n      setEmail('');\n    } else {\n      dispatch({\n        type: ActionTypes.EDIT_MEMBER,\n        member: {\n          ...memberFromForm,\n          id: member.id\n        }\n      });\n    }\n\n    // Show a confirmation message so the user knows what happened\n    setShowConfirm(true);\n  };\n\n  // Delete the member of the audience\n  const deleteMember = () => {\n    if (member) {\n      dispatch({\n        type: ActionTypes.DELETE_MEMBER,\n        member\n      });\n      if (handleDelete) {\n        handleDelete();\n      }\n    }\n  };\n\n  return (\n    <form onSubmit={handleFormSubmit}>\n      <div>\n        <label htmlFor=\"first-name\">First name</label>\n        <input\n          id=\"first-name\"\n          type=\"text\"\n          required={true}\n          value={firstName}\n          onChange={(e: React.FormEvent<HTMLInputElement>) => {\n            setFirstName(e.currentTarget.value);\n            setShowConfirm(false);\n          }}\n        />\n      </div>\n      <div>\n        <label htmlFor=\"last-name\">Last name</label>\n        <input\n          id=\"last-name\"\n          type=\"text\"\n          required={true}\n          value={lastName}\n          onChange={(e: React.FormEvent<HTMLInputElement>) => {\n            setLastName(e.currentTarget.value);\n            setShowConfirm(false);\n          }}\n        />\n      </div>\n      <div>\n        <label htmlFor=\"email\">Email address</label>\n        <input\n          id=\"email\"\n          type=\"email\"\n          required={true}\n          value={email}\n          onChange={(e: React.FormEvent<HTMLInputElement>) => {\n            setEmail(e.currentTarget.value);\n            setShowConfirm(false);\n          }}\n        />\n      </div>\n      {isEdit && (\n        <button\n          type=\"button\"\n          className=\"button button--secondary\"\n          onClick={deleteMember}\n        >\n          Delete\n        </button>\n      )}\n      <button type=\"submit\" className=\"button\">\n        {isEdit ? 'Update' : 'Add'}\n      </button>\n      {showConfirm && <p>{confirmationMessage}</p>}\n    </form>\n  );\n};\n\nexport default AudienceForm;\n","import * as React from 'react';\n\nimport PageIndex from '../components/PageIndex';\nimport { Page } from '../contexts/CurrentPage';\nimport { AudienceMember, useAudienceList } from '../contexts/AudienceList';\nimport AudienceList from '../components/AudienceList';\nimport AudienceForm from '../components/AudienceForm';\n\n// Define the name for this page\nconst pageName = Page.VIEW_AND_UPDATE;\n\nconst ViewAndUpdate: React.FC = () => {\n  const audience: AudienceMember[] = useAudienceList();\n  const [selectedMember, setSelectedMember] = React.useState<\n    AudienceMember | undefined\n  >(undefined);\n\n  // Because we are passing the selected member to the form as an object, it is\n  // possible that it gets out of sync with the audience list because of\n  // context versus local component state. Anytime the audience changes, let's\n  // check for the selected member in the list and update if found.\n  React.useEffect(() => {\n    if (selectedMember !== undefined) {\n      const selectedInAudience = audience.find((member: AudienceMember) => {\n        if (selectedMember) {\n          return member.id === selectedMember.id;\n        } else {\n          return false;\n        }\n      });\n      if (selectedInAudience) {\n        setSelectedMember(selectedInAudience);\n      }\n    }\n  }, [audience, selectedMember]);\n\n  // Provide a method for selected a member from the audience\n  const selectMember = (member: AudienceMember | undefined) => {\n    setSelectedMember(member);\n  };\n\n  return (\n    <PageIndex pageName={pageName}>\n      <h1 className=\"header\">View and Update</h1>\n      <div className=\"page-content\">\n        <AudienceList audience={audience} handleSelection={selectMember} />\n        <div className=\"form-area\">\n          {selectedMember !== undefined ? (\n            <AudienceForm\n              member={selectedMember}\n              handleDelete={() => {\n                setSelectedMember(undefined);\n              }}\n            />\n          ) : null}\n          {selectedMember === undefined && audience.length > 0 ? (\n            <p>Select an audience member to edit</p>\n          ) : null}\n        </div>\n      </div>\n    </PageIndex>\n  );\n};\n\nexport default ViewAndUpdate;\n","import * as React from 'react';\n\nimport PageIndex from '../components/PageIndex';\nimport AudienceForm from '../components/AudienceForm';\nimport { Page } from '../contexts/CurrentPage';\n\n// Define the name for this page\nconst pageName = Page.CREATE;\n\nconst Create: React.FC = () => {\n  return (\n    <PageIndex pageName={pageName}>\n      <h1 className=\"header\">Create</h1>\n      <div className=\"page-content page-content--reverse\">\n        <div className=\"form-area form-area--left\">\n          <AudienceForm />\n        </div>\n        <div />\n      </div>\n    </PageIndex>\n  );\n};\n\nexport default Create;\n","import React from 'react';\n\nimport AppContext from './contexts/AppContext';\nimport ViewAndUpdate from './pages/ViewAndUpdate';\nimport Create from './pages/Create';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <AppContext>\n        <ViewAndUpdate />\n        <Create />\n      </AppContext>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}